{\rtf1\ansi\ansicpg1252\cocoartf1025\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red255\green4\blue77;\red255\green107\blue1;\red16\green37\blue255;
\red150\green150\blue2;\red150\green122\blue8;\red67\green5\blue159;\red204\green3\blue62;\red10\green129\blue159;
\red116\green1\blue159;}
\margl1440\margr1440\vieww17080\viewh16240\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 {{\NeXTGraphic PlasmaExhibitsApp.pdf \width2560 \height2560
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b\fs30 \cf0 From A View to A Movie
\b0\fs24  (a.k.a. Plasma Exhibits II)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
5/27/2009\
\

\b Description:
\b0 \
\
\pard\pardeftab720\ql\qnatural
\cf0 This application extends the sample "From A View to A picture", and further demonstrates hardware accelerated capture, HD color correction, and movie authoring pipeline from a view.  Again, the contents are 3D animated objects generated using OpenGL The individual frames during a capture session are written into a framebuffer object.  From there, starting with median white-point and color primaries provided by ColorSync for a display profile, linear transformations are computed, HD color correction is applied using a shader, and the results are captured as frames from an offscreen framebuffer using pixel buffer objects. Finally, the frames are written into a movie using QuickTime media authoring interfaces.\
\

\b View Capture:
\b0 \
\
The view capture pipeline authors uncompressed BGRA frames. As a result, for large view captures one should expect a large movie files and high data rates.\
\

\b ColorSync:
\b0 \
\
To perform Rec. 709 color correction, one needs to form linear transformation matrices that will map non-linear RGB colors into the abstract CIE XYZ space and back, along with chromatic adaptation matrices in Cone Response Domain for mapping to D65 source white-point.  To form these linear transformations, one needs to start with RGB color primaries for linear transformations to and from CIE XYZ space, as well as a starting media white-point for chromatic adaptation matrices.  On Mac OS X the starting point is ColorSync.\
\
As an example, to extract media white-point using Leopard family of Color Manager application programming interfaces, one would proceed with:\
\

\f1 	\cf2 float\cf0  aSrcWhitePoint[3];\
\
	\cf3 CMProfileRef\cf0  pProfile;\
\
	\cf3 CMError\cf0  nError = \cf4 CMGetProfileElement\cf0 (pProfile, \cf5 cmMediaWhitePointTag\cf0 , &nWhitePointDataSize, \cf6 NULL\cf0 );\
	\
	if( nError == \cf6 noErr\cf0  )\
	\{\
		\cf3 CMXYZType\cf0  *pWhitePoint = (\cf3 CMXYZType\cf0  *)\cf7 malloc\cf0 (nWhitePointDataSize);\
		\
		if( pWhitePoint != \cf6 NULL\cf0  )\
		\{\
			err = \cf4 CMGetProfileElement\cf0 (pProfile, \cf5 cmMediaWhitePointTag\cf0 , &nWhitePointDataSize, pWhitePoint);\
			\
			\cf8 bool\cf0  isValid = ( err == \cf6 noErr\cf0  ) && ( \cf4 EndianU32_BtoN\cf0 (pWhitePoint->\cf9 typeDescriptor\cf0  ) == \cf5 cmSigXYZType\cf0  );\
			\
			if( isValid )\
			\{\
				\cf3 CMFixedXYZColor\cf0  aFixedWhitePoint = pWhitePoint->\cf9 XYZ[0]\cf0 ;\
				\
				aSrcWhitePoint[0] = \cf10 Fixed2Float\cf0 (\cf4 EndianU32_BtoN\cf0 (aFixedWhitePoint.\cf9 X\cf0 ));\
				aSrcWhitePoint[1] = \cf10 Fixed2Float\cf0 (\cf4 EndianU32_BtoN\cf0 (aFixedWhitePoint.\cf9 Y\cf0 ));\
				aSrcWhitePoint[2] = \cf10 Fixed2Float\cf0 (\cf4 EndianU32_BtoN\cf0 (aFixedWhitePoint.\cf9 Z\cf0 ));\
			\} // if\
			\
			\cf7 free\cf0 ( pWhitePoint );\
		\} // if\
	\} // if\

\f0 \
However, in Snow Leopard, to extract the same media white-point, one needs to use the modern ColorSync family of application programming interfaces, and hence:\
\

\f1 	\cf8 float\cf0  aSrcWhitePoint[3];\
\
	\cf3 ColorSyncProfileRef\cf0  pProfile;\
\
	\cf3 CFDataRef\cf0  pTagData = \cf4 ColorSyncProfileCopyTag\cf0 (pProfile, \cf4 CFSTR\cf0 ("\cf5 wtpt\cf0 "));\
	\
	if( pTagData != \cf6 NULL\cf0  )\
	\{\
		const \cf8 uint8_t\cf0  *pTagBytes= \cf4 CFDataGetBytePtr\cf0 ( pTagData );\
		\
		if( pTagBytes != \cf6 NULL\cf0  )\
		\{\
			\cf3 icXYZType\cf0  aXYZTag = *(\cf3 icXYZType\cf0 *)pTagBytes;\
			\
			\cf3 FourCharCode\cf0  aTagType = \cf4 CFSwapInt32BigToHost\cf0 ( aXYZTag.\cf9 base\cf0 .\cf9 sig\cf0  );\
			\
			if( aTagType == \cf5 icSigXYZType\cf0  )\
			\{\
				aSrcWhitePoint[0] = \cf10 Fixed2Float\cf0 (\cf4 CFSwapInt32BigToHost\cf0 (aXYZTag.\cf9 data\cf0 .\cf9 data[0]\cf0 .\cf9 X\cf0 ));\
				aSrcWhitePoint[1] = \cf10 Fixed2Float\cf0 (\cf4 CFSwapInt32BigToHost\cf0 (aXYZTag.\cf9 data\cf0 .\cf9 data[0]\cf0 .\cf9 Y\cf0 ));\
				aSrcWhitePoint[2] = \cf10 Fixed2Float\cf0 (\cf4 CFSwapInt32BigToHost\cf0 (aXYZTag.\cf9 data\cf0 .\cf9 data[0]\cf0 .\cf9 Z\cf0 ));\
			\} // if\
		\} // if\
		\
		\cf4 CFRelease\cf0 ( pTagData );\
	\} // if\

\f0 \
Note that in Snow Leopard, the results are returned as CFDataRef opaque data structure.  To extract the desired set of values, one must cast this opaque reference to an ICC structure using the ICC international standards and published ICC 3.4 profile header file. This ICC header file is shipped with Snow Leopard.  Furthermore, the header files can be obtained from the ICC web site at  
\f1\fs22 http://www.color.org/profileheader.xalter
\f0\fs24 .\
\
Also note that in both Leopard and Snow Leopard implementations, the CIE XYZ tristimulus values are returned as fixed numbers.  To convert these numbers to floating point numbers, suitable for matrix computations and linear transformations, one may use a function such as:\
\

\f1 	\cf8 float\cf0  \cf10 Fixed2Float\cf0 ( const \cf8 uint32_t\cf0  nFixedNum )\
	\{\
		return( nFixedNum / (\cf8 uint32_t\cf0 )\cf6 0x00010000L\cf0  );\
	\} \

\f0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b \cf0 Class Groups:
\b0 \
\
This application includes many reusable utility classes implementing and abstracting various application programming interface workflows.  The application uses MVC design pattern and as such utility classes, or class groups, are organized in the Xcode project with the following hierarchy:\
\
\'95	Model\
	*	Colors\
		\'95	Utility class to extract median white-point and RGB colorants from a ColorSync profile\
		\'95	Utility classes to compute chromatic adaptation matrices starting from Bradford matrices\
		\'95	Utility classes to compute linear transformations for mapping to and from CIE XYZ space staring with a ColorSync profile\
	\'95	Files\
		\'95	Preferences\
			\'95	Mediator class that manages application's property list\
			\'95	Mediator utility class for managing property list(s)\
	\'95	Image\
		\'95	Utility functions for converting pixels (or bitmaps) to CG opaque image references\
		\'95	Utility class for loading image arrays from application's bundle\
	\'95	Math\
		\'95	Utility class for matrix operations\
		\'95	Utility class for working with quaternions\
		\'95	Utility classes for working with Euclidean vectors\
	\'95	OpenGL\
		\'95	Exhibits\
			\'95	Displaying and managing various 3D geometrical objects\
			\'95	Management of their Plasma shader\
			\'95	Management of palette and pattern textures\
			\'95	Mediator for interacting with the UI\
		\'95	FBO\
			\'95	Utility classes for framebuffer object management and readback\
		\'95	Filters\
			\'95	Utility class that encapsulated HD color correction shader for Rec 709 space\
		\'95	Object\
			\'95	Utility class for timer based animation\
			\'95	Utility class for managing of objects physical motion properties\
			\'95	Utility class for trackball paradigm interaction with 3D object\
		\'95	PBO\
			\'95	Utility class for PBO asynchronous read pixel operation\
			\'95	Utility class for PBO asynchronous texture updates\
		\'95	Pixels\
			\'95	Utility class for acquiring a valid pixel format from a set of desired attributes\
		\'95	Quad\
			\'95	Utility class for instantiating a VBO based quad\
		\'95	Query\
			\'95	Utility class for querying the GPU for its hardware attributes\
		\'95	Shaders\
			\'95	Compiles, links, and acquires a program object from a fragment and vertex source\
			\'95	Manages assets such as uniforms and textures associated with a shader\
			\'95	Executes a shader along with its assets\
		\'95	Surfaces\
			\'95	Utility classes to build and then instantiate various forms of exotic 3D objects\
		\'95	Text\
			\'95	Utility classes to convert system fonts to textures for use with OpenGL\
		\'95	Texture\
			\'95	Utility classes for managing standard 1D, 2D, 3D textures as well as shared and cached textures\
			\'95	A mediator class for managing various forms of textures including textures bound to a PBO\
		\'95	View\
			\'95	Utility classes for taking a snapshot from a view and saving the results as tiff, pdf, bmp, png, pict, gif, jpeg, jp2.\
			\'95	Utility classes for capturing frames from a view and authoring a QuickTime movie\
	\'95	QuickTime\
		\'95	Utility classes for authoring QuickTime movies starting with individual media samples\
	\'95	Utilities\
		\'95	View animation class for fade in/out of panels and level indicators\
		\'95	A utility function for logging Core Foundation style errors\
		\'95	A utility class for generating a standard path name for saving images\
		\'95	A utility class that abstracts pixels (bitmaps) for use as media samples and QuickTime authoring utility classes\
		\'95	A utility class that implements a Mach based performance timer\
\'95	View\
	\'95	Utility classes for implementing a customized animating OpenGL view that allows limited interaction with 3D objects.\
\'95	Controller\
	\'95	Controller class to handle preferences UI interaction with property list\
	\'95	Controller class to handle UI interaction with filters, shaders, and property list\
\

\b Class Hierarchy:
\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 {{\NeXTGraphic Plasma Exhibits II Class Hierarchy.pdf \width28160 \height129020
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\
}